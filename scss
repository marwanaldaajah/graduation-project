# if (X_train < 0).any():
#     X_train = np.where(X_train < 0, 0, X_train)
# if (X_test < 0).any():
#     X_test = np.where(X_test < 0, 0, X_test)

# session[key_scaler] = scaler

# # Train the model
# model_name = request.form.get("model_name")
# if model_name == 'ada_boost':
#     model = AdaBoostClassifier()
# elif model_name == 'gradient_boost':
#     model = GradientBoostingClassifier()
# elif model_name == 'random_forest':
#     model = RandomForestClassifier()
# elif model_name == 'logistic_regression':
#     model = LogisticRegression()
# elif model_name == 'gaussian_nb':
#     model = GaussianNB()
# elif model_name == 'knn':
#     model = KNeighborsClassifier()
# elif model_name == 'mlp':
#     model = MLPClassifier()
# elif model_name == 'decision_tree':
#     model = DecisionTreeClassifier()
# elif model_name == 'svc':
#     model = SVC()
# elif model_name == 'ridge':
#     model = RidgeClassifier()
# elif model_name == 'sgd':
#     model = SGDClassifier()
# elif model_name == 'pass_agg':
#     model = PassiveAggressiveClassifier()
# elif model_name == 'bernoulli_nb':
#     model = BernoulliNB()
# elif model_name == 'nearest_centroid':
#     model = NearestCentroid()
# elif model_name == 'bagging':
#     model = BaggingClassifier()
# elif model_name == 'extra_trees':
#     model = ExtraTreesClassifier()
# elif model_name == 'lda':
#     model = LinearDiscriminantAnalysis()
# elif model_name == 'qda':
#     model = QuadraticDiscriminantAnalysis()
# else:
#     print("Please select a model.")
#     flash("Please select a model.")
#     return redirect(request.url)

# model.fit(X_train, y_train.values.ravel())

# # Get predictions on the testing data
# y_pred = model.predict(X_test)

# # Calculate evaluation metrics
# accuracy = accuracy_score(y_test, y_pred)
# f1 = f1_score(y_test, y_pred)
# precision = precision_score(y_test, y_pred)
# recall = recall_score(y_test, y_pred)

# session[key_model] = model
# session[key_accuracy] = accuracy

# session['training_in_progress'] = False

# return redirect(url_for("results"))
